diff -Naru src-orig/grabber.cc src-mod/grabber.cc
--- src-orig/grabber.cc	2013-03-27 17:52:38.000000000 +0200
+++ src-mod/grabber.cc	2019-02-16 15:28:14.733994066 +0200
@@ -424,10 +424,18 @@
 	if (!xi_grabbed == !grab)
 		return;
 	xi_grabbed = grab;
-	for (DeviceMap::iterator i = xi_devs.begin(); i != xi_devs.end(); ++i)
-		if (i->second->active)
-			for (std::vector<ButtonInfo>::iterator j = buttons.begin(); j != buttons.end(); j++)
-				i->second->grab_button(*j, grab);
+    if (! experimental) { //standard behaviour; only grab enabled devices
+        for (DeviceMap::iterator i = xi_devs.begin(); i != xi_devs.end(); ++i)
+                if (i->second->active)
+                    for (std::vector<ButtonInfo>::iterator j = buttons.begin(); j != buttons.end(); j++)
+                        i->second->grab_button(*j, grab );
+    }
+    else { //modified behaviour; also grab additional buttons of disabled devices
+        for (DeviceMap::iterator i = xi_devs.begin(); i != xi_devs.end(); ++i)
+                for (std::vector<ButtonInfo>::iterator j = buttons.begin(); j != buttons.end(); j++)
+                    if (i->second->active || j!=buttons.begin() )
+                        i->second->grab_button(*j, grab );
+    }
 }
 
 void Grabber::XiDevice::grab_device(GrabState grab) {
diff -Naru src-orig/handler.cc src-mod/handler.cc
--- src-orig/handler.cc	2019-02-16 02:15:45.324375909 +0200
+++ src-mod/handler.cc	2019-02-16 15:33:46.584957312 +0200
@@ -283,6 +283,16 @@
 				break;
 			xinput_pressed.erase(event->detail);
 			in_proximity = get_axis(event->valuators, current_dev->proximity_axis);
+
+            if (experimental) //if device is disabled, but extra buttons followed, treat last extra button as the default button
+                for (std::set<std::string>::iterator i = prefs.excluded_devices.ref().begin(); i != prefs.excluded_devices.ref().end(); i++)
+                    if (! i->compare(grabber->get_xi_dev(event->deviceid)->name) ) //check if the grabbed device name is in disabled device list
+                    {
+
+                        if (  prefs.extra_buttons.ref().size() && (guint) event->detail == prefs.extra_buttons.ref().rbegin()->button) //check if the button is same as last extra button
+                            event->detail = prefs.button.ref().button; //fake the default button
+                    }
+
 			H->release(event->detail, create_triple(event->root_x, event->root_y, event->time));
 			break;
 		case XI_Motion:
@@ -969,6 +979,9 @@
 	virtual void release(guint b, RTriple e) {
 		RStroke s = finish(0);
 
+        if (experimental) //button 1 should be treated as trigger 0, other trigger buttons copied from the event button b itself
+            s->trigger = b>1 ? b : 0 ; 
+        
 		if (prefs.move_back.get() && !xstate->current_dev->absolute)
 			XTestFakeMotionEvent(dpy, DefaultScreen(dpy), orig->x, orig->y, 0);
 		else
